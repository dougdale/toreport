#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
toreport

Parses ical entries for time off entries to produce a report of time off taken
and remaining
"""

import argparse
import yaml
from icalevents import icalevents
import sys
import datetime
import pytz

class ToreportException(Exception):
    pass

def toreport(cfgfile):
    try:
        with open(cfgfile, 'r') as yamlfile:
            config = yaml.safe_load(yamlfile)
    except IOError as err:
        raise ToreportException(err)

    year = config['year']

    startdate = datetime.date(year, 1, 1)

    events = icalevents.events(config['url'],
                               fix_apple='icloud' in config['url'],
                               start=startdate,
                               end=datetime.date(year, 12, 31))

    to_lists = dict()

    # List of time off 'types'
    to_types = config['types'].keys()

    for event in events:
        if event.summary in to_types:
            to_lists.setdefault(event.summary, list()).append(event)

    today = datetime.date.today()

    total_hours_used = 0
    total_hours_scheduled = 0
    total_remaining_hours = 0

    for to_type in to_types:
        type_hours_used = 0
        type_hours_scheduled = 0

        print()
        print("Calculating {}".format(to_type))

        to_list = to_lists.get(to_type, list())

        # Sort by start date, accounting for the fact that some don't have
        # the time zone set
        to_list.sort(key=lambda x: x.start if x.start.tzinfo else pytz.utc.localize(x.start))

        for event in to_list:
            # The query above picks up items on 12/31 of previous year. Skip those.
            if event.start.date() < startdate:
                continue

            if event.all_day:
                hours = 8
            else:
                hours = int((event.end - event.start)/datetime.timedelta(hours=1))

            print("{} hours on {}".format(hours, event.start.date().strftime("%a %b %d")))

            if event.start.date() < today:
                type_hours_used += hours
            else:
                type_hours_scheduled += hours

        remaining_hours = config['types'][to_type]['available'] -\
                          (type_hours_used + type_hours_scheduled)

        print("Used {}".format(type_hours_used))
        print("Scheduled {}".format(type_hours_scheduled))
        print("{} days ({} hours) of {} remain in {}".format(remaining_hours / 8,
            remaining_hours, to_type, year))

        total_hours_used += type_hours_used
        total_hours_scheduled += type_hours_scheduled
        total_remaining_hours += remaining_hours

    print()
    print("Total used {}".format(total_hours_used))
    print("Total scheduled {}".format(total_hours_scheduled))
    print("Total of {} days ({} hours) of time off remain in {}".format(total_remaining_hours / 8,
            total_remaining_hours, year))


if __name__ == '__main__':
    def main(cmdln_args):
        """
        Set up and parse arguments

        Arguments:
            cmdln_args: List of command line arguments (excluding script name)
        """

        # Parse arguments with argparse
        formatter_class = argparse.ArgumentDefaultsHelpFormatter

        parser = argparse.ArgumentParser(description=__doc__,
                                         formatter_class=formatter_class)

        parser.add_argument('--cfgfile',
                            help="Configuration file",
                            type=str,
                            default='toreport.yaml')

        args = parser.parse_args(cmdln_args)

        try:
            toreport(args.cfgfile)
        except ToreportException as err:
            print(err)
            return 1

        return 0

    # Call main() with parsed args
    sys.exit(main(sys.argv[1:]))